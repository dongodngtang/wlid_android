package net.doyouhike.app.wildbird.biz.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.doyouhike.app.wildbird.biz.db.bean.DbWildBird;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WILD_BIRD".
*/
public class WildBirdDao extends AbstractDao<DbWildBird, String> {

    public static final String TABLENAME = "WILD_BIRD";

    /**
     * Properties of entity DbWildBird.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SpeciesID = new Property(0, String.class, "speciesID", true, "SPECIES_ID");
        public final static Property LocalName = new Property(1, String.class, "localName", false, "LOCAL_NAME");
        public final static Property EngName = new Property(2, String.class, "engName", false, "ENG_NAME");
        public final static Property LatinName = new Property(3, String.class, "latinName", false, "LATIN_NAME");
        public final static Property Ordo = new Property(4, String.class, "ordo", false, "ORDO");
        public final static Property Familia = new Property(5, String.class, "familia", false, "FAMILIA");
        public final static Property Genus = new Property(6, String.class, "genus", false, "GENUS");
        public final static Property Shape = new Property(7, String.class, "shape", false, "SHAPE");
        public final static Property Color = new Property(8, String.class, "color", false, "COLOR");
        public final static Property Locate = new Property(9, String.class, "locate", false, "LOCATE");
        public final static Property Behavior = new Property(10, String.class, "behavior", false, "BEHAVIOR");
        public final static Property Head = new Property(11, String.class, "head", false, "HEAD");
        public final static Property Neck = new Property(12, String.class, "neck", false, "NECK");
        public final static Property Belly = new Property(13, String.class, "belly", false, "BELLY");
        public final static Property Waist = new Property(14, String.class, "waist", false, "WAIST");
        public final static Property Wing = new Property(15, String.class, "wing", false, "WING");
        public final static Property Tail = new Property(16, String.class, "tail", false, "TAIL");
        public final static Property Leg = new Property(17, String.class, "leg", false, "LEG");
        public final static Property Image = new Property(18, String.class, "image", false, "IMAGE");
        public final static Property Author = new Property(19, String.class, "author", false, "AUTHOR");
        public final static Property Newlocate = new Property(20, String.class, "newlocate", false, "NEWLOCATE");
        public final static Property ReadTime = new Property(21, String.class, "readTime", false, "READTIME");
        public final static Property ReadCount = new Property(22, String.class, "readCount", false, "READCOUNT");
    };

    private WbDaoSession daoSession;


    public WildBirdDao(DaoConfig config) {
        super(config);
    }
    
    public WildBirdDao(DaoConfig config, WbDaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WILD_BIRD\" (" + //
                "\"SPECIES_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: speciesID
                "\"LOCAL_NAME\" TEXT," + // 1: localName
                "\"ENG_NAME\" TEXT," + // 2: engName
                "\"LATIN_NAME\" TEXT," + // 3: latinName
                "\"ORDO\" TEXT," + // 4: ordo
                "\"FAMILIA\" TEXT," + // 5: familia
                "\"GENUS\" TEXT," + // 6: genus
                "\"SHAPE\" TEXT," + // 7: shape
                "\"COLOR\" TEXT," + // 8: color
                "\"LOCATE\" TEXT," + // 9: locate
                "\"BEHAVIOR\" TEXT," + // 10: behavior
                "\"HEAD\" TEXT," + // 11: head
                "\"NECK\" TEXT," + // 12: neck
                "\"BELLY\" TEXT," + // 13: belly
                "\"WAIST\" TEXT," + // 14: waist
                "\"WING\" TEXT," + // 15: wing
                "\"TAIL\" TEXT," + // 16: tail
                "\"LEG\" TEXT," + // 17: leg
                "\"IMAGE\" TEXT," + // 18: image
                "\"AUTHOR\" TEXT," + // 19: image
                "\"NEWLOCATE\" TEXT," +// 20: author
                "\"READTIME\" LONG," +// 21: readTime
                "\"READCOUNT\" LONG);"); // 22: readCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WILD_BIRD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbWildBird entity) {
        stmt.clearBindings();
 
        String speciesID = entity.getSpeciesID();
        if (speciesID != null) {
            stmt.bindString(1, speciesID);
        }
 
        String localName = entity.getLocalName();
        if (localName != null) {
            stmt.bindString(2, localName);
        }
 
        String engName = entity.getEngName();
        if (engName != null) {
            stmt.bindString(3, engName);
        }
 
        String latinName = entity.getLatinName();
        if (latinName != null) {
            stmt.bindString(4, latinName);
        }
 
        String ordo = entity.getOrdo();
        if (ordo != null) {
            stmt.bindString(5, ordo);
        }
 
        String familia = entity.getFamilia();
        if (familia != null) {
            stmt.bindString(6, familia);
        }
 
        String genus = entity.getGenus();
        if (genus != null) {
            stmt.bindString(7, genus);
        }
 
        String shape = entity.getShape();
        if (shape != null) {
            stmt.bindString(8, shape);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(9, color);
        }
 
        String locate = entity.getLocateList();
        if (locate != null) {
            stmt.bindString(10, locate);
        }
 
        String behavior = entity.getBehaviorList();
        if (behavior != null) {
            stmt.bindString(11, behavior);
        }
 
        String head = entity.getHeadList();
        if (head != null) {
            stmt.bindString(12, head);
        }
 
        String neck = entity.getNeckList();
        if (neck != null) {
            stmt.bindString(13, neck);
        }
 
        String belly = entity.getBellyList();
        if (belly != null) {
            stmt.bindString(14, belly);
        }
 
        String waist = entity.getWaistList();
        if (waist != null) {
            stmt.bindString(15, waist);
        }
 
        String wing = entity.getWingList();
        if (wing != null) {
            stmt.bindString(16, wing);
        }
 
        String tail = entity.getTailList();
        if (tail != null) {
            stmt.bindString(17, tail);
        }
 
        String leg = entity.getLegList();
        if (leg != null) {
            stmt.bindString(18, leg);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(19, image);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(20, author);
        }
        String newlocate = entity.getNewlocate();
        if (newlocate != null) {
            stmt.bindString(21, newlocate);
        }
        Long readTime = entity.getReadTime();
        if (readTime >= 0) {
            stmt.bindLong(22, readTime);
        }
        Long readCount = entity.getReadCount();
        if (readCount >= 0) {
            stmt.bindLong(23, readCount);
        }
    }

    @Override
    protected void attachEntity(DbWildBird entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbWildBird readEntity(Cursor cursor, int offset) {
        DbWildBird entity = new DbWildBird( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // speciesID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // localName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // engName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latinName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ordo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // familia
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // genus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shape
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // color
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // locate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // behavior
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // head
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // neck
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // belly
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // waist
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // wing
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tail
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // leg
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // image
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // author
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // author
            cursor.isNull(offset + 21) ? 0 : cursor.getLong(offset + 21), // author
            cursor.isNull(offset + 22) ? 0 : cursor.getLong(offset + 22) // newlocate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbWildBird entity, int offset) {
        entity.setSpeciesID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLocalName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEngName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatinName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrdo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFamilia(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGenus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShape(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setColorList(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocateList(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBehaviorList(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHeadList(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNeckList(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBellyList(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWaistList(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWingList(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTailList(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLegList(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImage(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAuthor(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNewlocate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setReadTime(cursor.isNull(offset + 21) ? 0 : cursor.getLong(offset + 21));
        entity.setReadCount(cursor.isNull(offset + 22) ? 0 : cursor.getLong(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DbWildBird entity, long rowId) {
        return entity.getSpeciesID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DbWildBird entity) {
        if(entity != null) {
            return entity.getSpeciesID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
