package net.doyouhike.app.wildbird.biz.db.bean;

import android.text.TextUtils;

import java.util.List;

import net.doyouhike.app.wildbird.biz.db.dao.DaoSession;

import de.greenrobot.dao.DaoException;

import net.doyouhike.app.wildbird.biz.db.dao.RecordDao;
import net.doyouhike.app.wildbird.biz.db.dao.RecordImageDao;
import net.doyouhike.app.wildbird.biz.model.bean.RecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "RECORD".
 */
public class DbRecord extends RecordEntity {

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;


    private String strDelImg;
    /**
     * Used for active entity operations.
     */
    private transient RecordDao myDao;

    private List<DbRecordImage> DbRecordImages;

    public DbRecord() {
    }

    public DbRecord(long record, Integer recordID, Integer speciesID, String speciesName, Integer hasImage, String latitude, String longitude, String altitude, String cityID, String cityName, String location, String time, Integer number, String description, String delImages) {
        this.record = record;
        this.recordID = recordID;
        this.speciesID = speciesID;
        this.speciesName = speciesName;
        this.hasImage = hasImage;

        if (!TextUtils.isEmpty(latitude))
            this.latitude = Double.parseDouble(latitude);

        if (!TextUtils.isEmpty(longitude))
            this.longitude = Double.parseDouble(longitude);

        if (!TextUtils.isEmpty(altitude))
            this.altitude = Double.parseDouble(altitude);
        if (!TextUtils.isEmpty(cityID))
            this.cityID = Integer.valueOf(cityID);

        this.cityName = cityName;
        this.location = location;

        if (!TextUtils.isEmpty(time))
            this.time = Long.parseLong(time);

        this.number = number;
        this.description = description;


        this.strDelImg = delImages;
        strToImgs(strDelImg);
    }

    public DbRecord(RecordEntity entity) {
        initData(entity);
    }

    private void initData(RecordEntity entity) {
        if (null==entity){
            return;
        }
        this.record = entity.getRecord();
        this.recordID = entity.getRecordID();
        this.speciesID = entity.getSpeciesID();
        this.speciesName = entity.getSpeciesName();
        this.hasImage = entity.getHasImage();
        this.latitude = entity.getLatitude();
        this.longitude = entity.getLongitude();
        this.altitude = entity.getAltitude();
        this.cityID = entity.getCityID();

        if (!TextUtils.isEmpty(entity.getCityName())) ;
            this.cityName = entity.getCityName();

        if (!TextUtils.isEmpty(entity.getLocation())) ;
            this.location = entity.getLocation();

        this.time = entity.getTime();
        this.number = entity.getNumber();
        this.description = entity.getDescription();
        setList(entity.getList());
        setDelImages(entity.getDelImages());

        this.strDelImg = imgsTostr(entity.getDelImages());
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecordDao() : null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<DbRecordImage> getDbRecordImages() {
        if (DbRecordImages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecordImageDao targetDao = daoSession.getRecordImageDao();
            List<DbRecordImage> dbRecordImagesNew = targetDao._queryRecord_RecordImages(record);
            synchronized (this) {
                if (DbRecordImages == null) {
                    DbRecordImages = dbRecordImagesNew;
                }
            }
        }
        return DbRecordImages;
    }

    public String getStrDelImg() {
        return strDelImg;
    }

    public void setStrDelImg(String delImages) {
        this.strDelImg = delImages;
        strToImgs(strDelImg);
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetRecordImages() {
        DbRecordImages = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    private void strToImgs(String delImages) {

        if (TextUtils.isEmpty(delImages)) {
            getDelImages().clear();
        } else {
            String[] data = delImages.split("#");
            for (int i = 0; i < data.length; i++) {
                addDelImage(Integer.parseInt(data[i]));
            }
        }
    }

    private String imgsTostr(List<Integer> delImages) {
        StringBuffer stringBuffer = new StringBuffer("");
        if (delImages.size() > 0) {

            for (int i = 0; i < delImages.size(); i++) {
                stringBuffer.append(delImages.get(i)).append("#");
            }
        }

        int length = stringBuffer.length();

        if (length > 1) {
            return stringBuffer.substring(0, length - 1);
        }

        return "";


    }
}
