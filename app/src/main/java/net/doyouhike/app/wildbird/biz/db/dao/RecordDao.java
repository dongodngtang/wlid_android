package net.doyouhike.app.wildbird.biz.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.doyouhike.app.wildbird.biz.db.bean.DbRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<DbRecord, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity DbRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Record = new Property(0, Long.class, "record", true, "RECORD");
        public final static Property RecordID = new Property(1, Integer.class, "recordID", false, "RECORD_ID");
        public final static Property SpeciesID = new Property(2, Integer.class, "speciesID", false, "SPECIES_ID");
        public final static Property SpeciesName = new Property(3, String.class, "speciesName", false, "SPECIES_NAME");
        public final static Property HasImage = new Property(4, Integer.class, "hasImage", false, "HAS_IMAGE");
        public final static Property Latitude = new Property(5, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, String.class, "longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(7, String.class, "altitude", false, "ALTITUDE");
        public final static Property CityID = new Property(8, String.class, "cityID", false, "CITY_ID");
        public final static Property CityName = new Property(9, String.class, "cityName", false, "CITY_NAME");
        public final static Property Location = new Property(10, String.class, "location", false, "LOCATION");
        public final static Property Time = new Property(11, String.class, "time", false, "TIME");
        public final static Property Number = new Property(12, Integer.class, "number", false, "NUMBER");
        public final static Property Description = new Property(13, String.class, "description", false, "DESCRIPTION");
        public final static Property DelImages = new Property(14, String.class, "delImages", false, "DEL_IMAGES");
    };

    private DaoSession daoSession;


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"RECORD\" INTEGER PRIMARY KEY AUTOINCREMENT," + // 0: record
                "\"RECORD_ID\" INTEGER," + // 1: recordID
                "\"SPECIES_ID\" INTEGER," + // 2: speciesID
                "\"SPECIES_NAME\" TEXT," + // 3: speciesName
                "\"HAS_IMAGE\" INTEGER," + // 4: hasImage
                "\"LATITUDE\" TEXT," + // 5: latitude
                "\"LONGITUDE\" TEXT," + // 6: longitude
                "\"ALTITUDE\" TEXT," + // 7: altitude
                "\"CITY_ID\" TEXT," + // 8: cityID
                "\"CITY_NAME\" TEXT," + // 9: cityName
                "\"LOCATION\" TEXT," + // 10: location
                "\"TIME\" TEXT," + // 11: time
                "\"NUMBER\" INTEGER," + // 12: number
                "\"DESCRIPTION\" TEXT," + // 13: description
                "\"DEL_IMAGES\" TEXT);"); // 14: delImages
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbRecord entity) {
        stmt.clearBindings();
 
        Long record = entity.getRecord();
        if (record != null) {
            stmt.bindLong(1, record);
        }
 
        Integer recordID = entity.getRecordID();
        if (recordID != null) {
            stmt.bindLong(2, recordID);
        }
 
        Integer speciesID = entity.getSpeciesID();
        if (speciesID != null) {
            stmt.bindLong(3, speciesID);
        }
 
        String speciesName = entity.getSpeciesName();
        if (speciesName != null) {
            stmt.bindString(4, speciesName);
        }
 
        Integer hasImage = entity.getHasImage();
        if (hasImage != null) {
            stmt.bindLong(5, hasImage);
        }
 
        String latitude = entity.getLatitude()+"";
        if (latitude != null) {
            stmt.bindString(6, latitude);
        }
 
        String longitude = entity.getLongitude()+"";
        if (longitude != null) {
            stmt.bindString(7, longitude);
        }
 
        String altitude = entity.getAltitude()+"";
        if (altitude != null) {
            stmt.bindString(8, altitude);
        }
 
        String cityID = entity.getCityID()+"";
        if (cityID != null) {
            stmt.bindString(9, cityID);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(10, cityName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(11, location);
        }
 
        String time = entity.getTime()+"";
        if (time != null) {
            stmt.bindString(12, time);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(13, number);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(14, description);
        }
 
        String delImages = entity.getStrDelImg();
        if (delImages != null) {
            stmt.bindString(15, delImages);
        }
    }

    @Override
    protected void attachEntity(DbRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbRecord readEntity(Cursor cursor, int offset) {
        DbRecord entity = new DbRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // record
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // recordID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // speciesID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // speciesName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // hasImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // latitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // altitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cityID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cityName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // location
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // time
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // number
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // description
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // delImages
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbRecord entity, int offset) {
        entity.setRecord(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSpeciesID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSpeciesName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHasImage(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLatitude(cursor.isNull(offset + 5) ? 0.000000 : Double.parseDouble(cursor.getString(offset + 5)));
        entity.setLongitude(cursor.isNull(offset + 6) ? 0.000000: Double.parseDouble(cursor.getString(offset + 6)));
        entity.setAltitude(cursor.isNull(offset + 7) ? 0.000000: Double.parseDouble(cursor.getString(offset + 7)));
        entity.setCityID(cursor.isNull(offset + 8) ? 0: Integer.valueOf(cursor.getString(offset + 8)));
        entity.setCityName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLocation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTime(cursor.isNull(offset + 11) ? 0: Long.valueOf(cursor.getString(offset + 11)));
        entity.setNumber(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStrDelImg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbRecord entity, long rowId) {
        return entity.getRecord();
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbRecord entity) {
        if(entity != null) {
            return entity.getRecord();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
