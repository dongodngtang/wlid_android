package net.doyouhike.app.wildbird.biz.db.bean;

import net.doyouhike.app.wildbird.biz.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import net.doyouhike.app.wildbird.biz.db.dao.RecordDao;
import net.doyouhike.app.wildbird.biz.db.dao.RecordImageDao;
import net.doyouhike.app.wildbird.biz.model.bean.RecordImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RECORD_IMAGE".
 */
public class DbRecordImage extends RecordImage{

    private Long record;

    /** Used to resolve relations */
    private transient DaoSession daoSession;
    private Long id;

    /** Used for active entity operations. */
    private transient RecordImageDao myDao;

    private DbRecord recordOject;
    private Long recordOject__resolvedKey;

    public DbRecordImage() {
    }

    public DbRecordImage(Long id,Long record, String uri, Integer imageID) {
        this.id=id;
        this.record = record;
        this.imageUri = uri;
        this.imageID = imageID;
    }

    public DbRecordImage(Long record,RecordImage image) {
        this.record = record;
        this.imageUri = image.getImageUri();
        this.imageID = image.getImageID();
        this.id=null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecordImageDao() : null;
    }

    public Long getRecord() {
        return record;
    }

    public void setRecord(Long record) {
        this.record = record;
    }

    /** To-one relationship, resolved on first access. */
    public DbRecord getRecordOject() {
        Long __key = this.record;
        if (recordOject__resolvedKey == null || !recordOject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RecordDao targetDao = daoSession.getRecordDao();
            DbRecord recordOjectNew = targetDao.load(__key);
            synchronized (this) {
                recordOject = recordOjectNew;
            	recordOject__resolvedKey = __key;
            }
        }
        return recordOject;
    }

    public void setRecordOject(DbRecord recordOject) {
        synchronized (this) {
            this.recordOject = recordOject;
            record = recordOject == null ? null : recordOject.getRecord();
            recordOject__resolvedKey = record;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
