package net.doyouhike.app.wildbird.biz.db.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class WbDaoMaster extends AbstractDaoMaster {
//    public static final int SCHEMA_VERSION =2;
//    public static final int SCHEMA_VERSION =3;
    public static final int SCHEMA_VERSION =4;//新增阅读时间 阅读次数字段

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        WildBirdDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        ImageDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        WildBirdDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        ImageDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        private Context mContext;

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
            mContext = context;

        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");


            if (newVersion == 2) {
                //版本2 添加新字段
                String columnName = WildBirdDao.Properties.Newlocate.columnName;
                String tableName = WildBirdDao.TABLENAME;
                String strSQL = "ALTER TABLE \"" + tableName + "\" ADD \"" + columnName + "\" TEXT DEFAULT \"\";";
                db.execSQL(strSQL);
            }else if (newVersion == 4) {
                //版本4 阅读时间和阅读次数
                String tableName = WildBirdDao.TABLENAME;
                String columnNameReadTime = WildBirdDao.Properties.ReadTime.columnName;
                String ADD_COLUMN_READTIME = "ALTER TABLE \"" + tableName + "\" ADD \"" + columnNameReadTime + "\" LONG DEFAULT 0;";
                String columnNameReadCount = WildBirdDao.Properties.ReadCount.columnName;
                String ADD_COLUMN_READCOUNT = "ALTER TABLE \"" + tableName + "\" ADD \"" + columnNameReadCount + "\" LONG DEFAULT 0;";


                db.execSQL(ADD_COLUMN_READTIME);
                db.execSQL(ADD_COLUMN_READCOUNT);
            }
//            else if (newVersion == 3) {
//                //版本3 增加新的鸟种,在这里升级容易出错
//                dropAllTables(db, true);
//                CopyDatabaseUtil.copyDataBase(mContext);
//            }
//            else {
//                dropAllTables(db, true);
//                onCreate(db);
//            }

        }
    }

    public WbDaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(WildBirdDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(ImageDao.class);
    }

    public WbDaoSession newSession() {
        return new WbDaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public WbDaoSession newSession(IdentityScopeType type) {
        return new WbDaoSession(db, type, daoConfigMap);
    }

}
