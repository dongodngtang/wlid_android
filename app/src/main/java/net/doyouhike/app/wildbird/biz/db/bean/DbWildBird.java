package net.doyouhike.app.wildbird.biz.db.bean;

import com.google.gson.annotations.SerializedName;

import net.doyouhike.app.wildbird.biz.db.dao.CommentDao;
import net.doyouhike.app.wildbird.biz.db.dao.ImageDao;
import net.doyouhike.app.wildbird.biz.db.dao.WbDaoSession;
import net.doyouhike.app.wildbird.biz.db.dao.WildBirdDao;
import net.doyouhike.app.wildbird.biz.model.bean.Comment;
import net.doyouhike.app.wildbird.biz.model.bean.SpeciesInfo;

import java.util.ArrayList;
import java.util.List;
import de.greenrobot.dao.DaoException;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WILD_BIRD".
 */
public class DbWildBird extends SpeciesInfo{


    /** Used to resolve relations */
    private transient WbDaoSession daoSession;

    /** Used for active entity operations. */
    private transient WildBirdDao myDao;

    private List<DbComment> dbComments;
    @SerializedName("DbImage")
    private List<DbImage> images;
    /**
     * last open bird detail time
     */
    private long readTime;
    /**
     * view bird detail count ,read once +1
     */
    private long readCount;

    public DbWildBird() {
    }


    public DbWildBird(String speciesID, String localName, String engName,
                      String latinName, String ordo, String familia, String genus,
                      String shape, String color, String locate, String behavior,
                      String head, String neck, String belly, String waist, String wing,
                      String tail, String leg, String image, String author,String newlocate,long readTime,long readCount) {
        this.speciesID = speciesID;
        this.localName = localName;
        this.engName = engName;
        this.latinName = latinName;
        this.ordo = ordo;
        this.familia = familia;
        this.genus = genus;
        this.shape = shape;
        this.colorList = color;
        this.locateList = locate;
        this.behaviorList = behavior;
        this.headList = head;
        this.neckList = neck;
        this.bellyList = belly;
        this.waistList = waist;
        this.wingList = wing;
        this.tailList = tail;
        this.legList = leg;
        this.image = image;
        this.author = author;
        this.newlocate =newlocate;
        this.readTime=readTime;
        this.readCount=readCount;
    }


    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(WbDaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWildBirdDao() : null;
    }

    public String getSpeciesID() {
        return speciesID;
    }

    public void setSpeciesID(String speciesID) {
        this.speciesID = speciesID;
    }

    public String getLocalName() {
        return localName;
    }

    public void setLocalName(String localName) {
        this.localName = localName;
    }

    public String getEngName() {
        return engName;
    }

    public void setEngName(String engName) {
        this.engName = engName;
    }

    public String getLatinName() {
        return latinName;
    }

    public void setLatinName(String latinName) {
        this.latinName = latinName;
    }

    public String getOrdo() {
        return ordo;
    }

    public void setOrdo(String ordo) {
        this.ordo = ordo;
    }

    public String getFamilia() {
        return familia;
    }

    public void setFamilia(String familia) {
        this.familia = familia;
    }

    public String getGenus() {
        return genus;
    }

    public void setGenus(String genus) {
        this.genus = genus;
    }

    public String getShape() {
        return shape;
    }

    public void setShape(String shape) {
        this.shape = shape;
    }

    public String getColor() {
        return colorList;
    }

    public void setColorList(String color) {
        this.colorList = color;
    }

    public String getLocateList() {
        return locateList;
    }

    public void setLocateList(String locateList) {
        this.locateList = locateList;
    }

    public String getBehaviorList() {
        return behaviorList;
    }

    public void setBehaviorList(String behaviorList) {
        this.behaviorList = behaviorList;
    }

    public String getHeadList() {
        return headList;
    }

    public void setHeadList(String headList) {
        this.headList = headList;
    }

    public String getNeckList() {
        return neckList;
    }

    public void setNeckList(String neckList) {
        this.neckList = neckList;
    }

    public String getBellyList() {
        return bellyList;
    }

    public void setBellyList(String bellyList) {
        this.bellyList = bellyList;
    }

    public String getWaistList() {
        return waistList;
    }

    public void setWaistList(String waistList) {
        this.waistList = waistList;
    }

    public String getWingList() {
        return wingList;
    }

    public void setWingList(String wingList) {
        this.wingList = wingList;
    }

    public String getTailList() {
        return tailList;
    }

    public void setTailList(String tailList) {
        this.tailList = tailList;
    }

    public String getLegList() {
        return legList;
    }

    public void setLegList(String legList) {
        this.legList = legList;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public long getReadTime() {
        return readTime;
    }

    public void setReadTime(long readTime) {
        this.readTime = readTime;
    }

    public long getReadCount() {
        return readCount;
    }

    public void setReadCount(long readCount) {
        this.readCount = readCount;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbComment> getDbComments() {
        if (dbComments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            List<DbComment> commentsNew = targetDao._queryWildBird_Comments(speciesID);
            synchronized (this) {
                if(dbComments == null) {
                    dbComments = commentsNew;
                }
            }
        }
        return dbComments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComments() {
        dbComments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbImage> getDbImages() {
        if (images == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageDao targetDao = daoSession.getImageDao();
            List<DbImage> imagesNew = targetDao._queryWildBird_Images(speciesID);
            synchronized (this) {
                if(images == null) {
                    images = imagesNew;
                }
            }
        }
        return images;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetImages() {
        images = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
